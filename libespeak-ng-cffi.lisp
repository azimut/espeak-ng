;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 3.0.12
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.

(cffi:load-foreign-library "libespeak-ng.so") 
(in-package #:libespeak-ng)
(defmacro define-constant (name value &optional doc)
  `(defconstant ,name (if (boundp ',name) (symbol-value ',name) ,value)
                      ,@(when doc (list doc))))



;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (cl:&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(define-constant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(define-constant ESPEAK_API_REVISION 12)

(cl:export 'ESPEAK_API_REVISION)

(define-constant espeakRATE_MINIMUM 80)

(cl:export 'espeakRATE_MINIMUM)

(define-constant espeakRATE_MAXIMUM 450)

(cl:export 'espeakRATE_MAXIMUM)

(define-constant espeakRATE_NORMAL 175)

(cl:export 'espeakRATE_NORMAL)

(cffi:defcenum espeak_EVENT_TYPE
	(:espeakEVENT_LIST_TERMINATED #.0)
	(:espeakEVENT_WORD #.1)
	(:espeakEVENT_SENTENCE #.2)
	(:espeakEVENT_MARK #.3)
	(:espeakEVENT_PLAY #.4)
	(:espeakEVENT_END #.5)
	(:espeakEVENT_MSG_TERMINATED #.6)
	(:espeakEVENT_PHONEME #.7)
	(:espeakEVENT_SAMPLERATE #.8))

(cl:export 'espeak_EVENT_TYPE)

(cffi:defcstruct espeak_EVENT
	(type espeak_EVENT_TYPE)
	(unique_identifier :unsigned-int)
	(text_position :int)
	(length :int)
	(audio_position :int)
	(sample :int)
	(user_data :pointer)
	(id :pointer))

(cl:export 'espeak_EVENT)

(cl:export 'type)

(cl:export 'unique_identifier)

(cl:export 'text_position)

(cl:export 'length)

(cl:export 'audio_position)

(cl:export 'sample)

(cl:export 'user_data)

(cl:export 'id)

(cffi:defcunion espeak_EVENT_id
	(number :int)
	(name :string)
	(string :pointer :count 8))

(cl:export 'espeak_EVENT_id)

(cl:export 'number)

(cl:export 'name)

(cl:export 'string)

(cffi:defcenum espeak_POSITION_TYPE
	(:POS_CHARACTER #.1)
	:POS_WORD
	:POS_SENTENCE)

(cl:export 'espeak_POSITION_TYPE)

(cffi:defcenum espeak_AUDIO_OUTPUT
	:AUDIO_OUTPUT_PLAYBACK
	:AUDIO_OUTPUT_RETRIEVAL
	:AUDIO_OUTPUT_SYNCHRONOUS
	:AUDIO_OUTPUT_SYNCH_PLAYBACK)

(cl:export 'espeak_AUDIO_OUTPUT)

(cffi:defcenum espeak_ERROR
	(:EE_OK #.0)
	(:EE_INTERNAL_ERROR #.-1)
	(:EE_BUFFER_FULL #.1)
	(:EE_NOT_FOUND #.2))

(cl:export 'espeak_ERROR)

(define-constant espeakINITIALIZE_PHONEME_EVENTS #x0001)

(cl:export 'espeakINITIALIZE_PHONEME_EVENTS)

(define-constant espeakINITIALIZE_PHONEME_IPA #x0002)

(cl:export 'espeakINITIALIZE_PHONEME_IPA)

(define-constant espeakINITIALIZE_DONT_EXIT #x8000)

(cl:export 'espeakINITIALIZE_DONT_EXIT)

(cffi:defcfun ("espeak_Initialize" espeak_Initialize) :int
  (output espeak_AUDIO_OUTPUT)
  (buflength :int)
  (path :string)
  (options :int))

(cl:export 'espeak_Initialize)

(cffi:defcfun ("espeak_SetSynthCallback" espeak_SetSynthCallback) :void
  (SynthCallback :pointer))

(cl:export 'espeak_SetSynthCallback)

(cffi:defcfun ("espeak_SetUriCallback" espeak_SetUriCallback) :void
  (UriCallback :pointer))

(cl:export 'espeak_SetUriCallback)

(cffi:defcfun ("espeak_SetPhonemeCallback" espeak_SetPhonemeCallback) :void
  (PhonemeCallback :pointer))

(cl:export 'espeak_SetPhonemeCallback)

(define-constant espeakCHARS_AUTO 0)

(cl:export 'espeakCHARS_AUTO)

(define-constant espeakCHARS_UTF8 1)

(cl:export 'espeakCHARS_UTF8)

(define-constant espeakCHARS_8BIT 2)

(cl:export 'espeakCHARS_8BIT)

(define-constant espeakCHARS_WCHAR 3)

(cl:export 'espeakCHARS_WCHAR)

(define-constant espeakCHARS_16BIT 4)

(cl:export 'espeakCHARS_16BIT)

(define-constant espeakSSML #x10)

(cl:export 'espeakSSML)

(define-constant espeakPHONEMES #x100)

(cl:export 'espeakPHONEMES)

(define-constant espeakENDPAUSE #x1000)

(cl:export 'espeakENDPAUSE)

(define-constant espeakKEEP_NAMEDATA #x2000)

(cl:export 'espeakKEEP_NAMEDATA)

(cffi:defcfun ("espeak_Synth" espeak_Synth) espeak_ERROR
  (text :pointer)
  (size :pointer)
  (position :unsigned-int)
  (position_type espeak_POSITION_TYPE)
  (end_position :unsigned-int)
  (flags :unsigned-int)
  (unique_identifier :pointer)
  (user_data :pointer))

(cl:export 'espeak_Synth)

(cffi:defcfun ("espeak_Synth_Mark" espeak_Synth_Mark) espeak_ERROR
  (text :pointer)
  (size :pointer)
  (index_mark :string)
  (end_position :unsigned-int)
  (flags :unsigned-int)
  (unique_identifier :pointer)
  (user_data :pointer))

(cl:export 'espeak_Synth_Mark)

(cffi:defcfun ("espeak_Key" espeak_Key) espeak_ERROR
  (key_name :string))

(cl:export 'espeak_Key)

(cffi:defcfun ("espeak_Char" espeak_Char) espeak_ERROR
  (character :pointer))

(cl:export 'espeak_Char)

(cffi:defcenum espeak_PARAMETER
	(:espeakSILENCE #.0)
	(:espeakRATE #.1)
	(:espeakVOLUME #.2)
	(:espeakPITCH #.3)
	(:espeakRANGE #.4)
	(:espeakPUNCTUATION #.5)
	(:espeakCAPITALS #.6)
	(:espeakWORDGAP #.7)
	(:espeakOPTIONS #.8)
	(:espeakINTONATION #.9)
	(:espeakRESERVED1 #.10)
	(:espeakRESERVED2 #.11)
	:espeakEMPHASIS
	:espeakLINELENGTH
	:espeakVOICETYPE
	:N_SPEECH_PARAM)

(cl:export 'espeak_PARAMETER)

(cffi:defcenum espeak_PUNCT_TYPE
	(:espeakPUNCT_NONE #.0)
	(:espeakPUNCT_ALL #.1)
	(:espeakPUNCT_SOME #.2))

(cl:export 'espeak_PUNCT_TYPE)

(cffi:defcfun ("espeak_SetParameter" espeak_SetParameter) espeak_ERROR
  (parameter espeak_PARAMETER)
  (value :int)
  (relative :int))

(cl:export 'espeak_SetParameter)

(cffi:defcfun ("espeak_GetParameter" espeak_GetParameter) :int
  (parameter espeak_PARAMETER)
  (current :int))

(cl:export 'espeak_GetParameter)

(cffi:defcfun ("espeak_SetPunctuationList" espeak_SetPunctuationList) espeak_ERROR
  (punctlist :pointer))

(cl:export 'espeak_SetPunctuationList)

(define-constant espeakPHONEMES_SHOW #x01)

(cl:export 'espeakPHONEMES_SHOW)

(define-constant espeakPHONEMES_IPA #x02)

(cl:export 'espeakPHONEMES_IPA)

(define-constant espeakPHONEMES_TRACE #x08)

(cl:export 'espeakPHONEMES_TRACE)

(define-constant espeakPHONEMES_MBROLA #x10)

(cl:export 'espeakPHONEMES_MBROLA)

(define-constant espeakPHONEMES_TIE #x80)

(cl:export 'espeakPHONEMES_TIE)

(cffi:defcfun ("espeak_SetPhonemeTrace" espeak_SetPhonemeTrace) :void
  (phonememode :int)
  (stream :pointer))

(cl:export 'espeak_SetPhonemeTrace)

(cffi:defcfun ("espeak_TextToPhonemes" espeak_TextToPhonemes) :string
  (textptr :pointer)
  (textmode :int)
  (phonememode :int))

(cl:export 'espeak_TextToPhonemes)

(cffi:defcfun ("espeak_CompileDictionary" espeak_CompileDictionary) :void
  (path :string)
  (log :pointer)
  (flags :int))

(cl:export 'espeak_CompileDictionary)

(cffi:defcstruct espeak_VOICE
	(name :string)
	(languages :string)
	(identifier :string)
	(gender :unsigned-char)
	(age :unsigned-char)
	(variant :unsigned-char)
	(xx1 :unsigned-char)
	(score :int)
	(spare :pointer))

(cl:export 'espeak_VOICE)

(cl:export 'name)

(cl:export 'languages)

(cl:export 'identifier)

(cl:export 'gender)

(cl:export 'age)

(cl:export 'variant)

(cl:export 'xx1)

(cl:export 'score)

(cl:export 'spare)

(cffi:defcfun ("espeak_ListVoices" espeak_ListVoices) :pointer
  (voice_spec :pointer))

(cl:export 'espeak_ListVoices)

(cffi:defcfun ("espeak_SetVoiceByName" espeak_SetVoiceByName) espeak_ERROR
  (name :string))

(cl:export 'espeak_SetVoiceByName)

(cffi:defcfun ("espeak_SetVoiceByProperties" espeak_SetVoiceByProperties) espeak_ERROR
  (voice_spec :pointer))

(cl:export 'espeak_SetVoiceByProperties)

(cffi:defcfun ("espeak_GetCurrentVoice" espeak_GetCurrentVoice) :pointer)

(cl:export 'espeak_GetCurrentVoice)

(cffi:defcfun ("espeak_Cancel" espeak_Cancel) espeak_ERROR)

(cl:export 'espeak_Cancel)

(cffi:defcfun ("espeak_IsPlaying" espeak_IsPlaying) :int)

(cl:export 'espeak_IsPlaying)

(cffi:defcfun ("espeak_Synchronize" espeak_Synchronize) espeak_ERROR)

(cl:export 'espeak_Synchronize)

(cffi:defcfun ("espeak_Terminate" espeak_Terminate) espeak_ERROR)

(cl:export 'espeak_Terminate)

(cffi:defcfun ("espeak_Info" espeak_Info) :string
  (path_data :pointer))

(cl:export 'espeak_Info)

(define-constant ESPEAKNG_DEFAULT_VOICE "en")

(cl:export 'ESPEAKNG_DEFAULT_VOICE)

(cffi:defcenum espeak_ng_STATUS
	(:ENS_GROUP_MASK #.#x70000000)
	(:ENS_GROUP_ERRNO #.#x00000000)
	(:ENS_GROUP_ESPEAK_NG #.#x10000000)
	(:ENS_OK #.0)
	(:ENS_COMPILE_ERROR #.#x100001FF)
	(:ENS_VERSION_MISMATCH #.#x100002FF)
	(:ENS_FIFO_BUFFER_FULL #.#x100003FF)
	(:ENS_NOT_INITIALIZED #.#x100004FF)
	(:ENS_AUDIO_ERROR #.#x100005FF)
	(:ENS_VOICE_NOT_FOUND #.#x100006FF)
	(:ENS_MBROLA_NOT_FOUND #.#x100007FF)
	(:ENS_MBROLA_VOICE_NOT_FOUND #.#x100008FF)
	(:ENS_EVENT_BUFFER_FULL #.#x100009FF)
	(:ENS_NOT_SUPPORTED #.#x10000AFF)
	(:ENS_UNSUPPORTED_PHON_FORMAT #.#x10000BFF)
	(:ENS_NO_SPECT_FRAMES #.#x10000CFF)
	(:ENS_EMPTY_PHONEME_MANIFEST #.#x10000DFF)
	(:ENS_SPEECH_STOPPED #.#x10000EFF)
	(:ENS_UNKNOWN_PHONEME_FEATURE #.#x10000FFF)
	(:ENS_UNKNOWN_TEXT_ENCODING #.#x100010FF))

(cl:export 'espeak_ng_STATUS)

(cffi:defcenum espeak_ng_OUTPUT_MODE
	(:ENOUTPUT_MODE_SYNCHRONOUS #.#x0001)
	(:ENOUTPUT_MODE_SPEAK_AUDIO #.#x0002))

(cl:export 'espeak_ng_OUTPUT_MODE)

(cffi:defcenum espeak_ng_VOICE_GENDER
	(:ENGENDER_UNKNOWN #.0)
	(:ENGENDER_MALE #.1)
	(:ENGENDER_FEMALE #.2)
	(:ENGENDER_NEUTRAL #.3))

(cl:export 'espeak_ng_VOICE_GENDER)

(cffi:defcfun ("espeak_ng_ClearErrorContext" espeak_ng_ClearErrorContext) :void
  (context :pointer))

(cl:export 'espeak_ng_ClearErrorContext)

(cffi:defcfun ("espeak_ng_GetStatusCodeMessage" espeak_ng_GetStatusCodeMessage) :void
  (status espeak_ng_STATUS)
  (buffer :string)
  (length :pointer))

(cl:export 'espeak_ng_GetStatusCodeMessage)

(cffi:defcfun ("espeak_ng_PrintStatusCodeMessage" espeak_ng_PrintStatusCodeMessage) :void
  (status espeak_ng_STATUS)
  (out :pointer)
  (context :pointer))

(cl:export 'espeak_ng_PrintStatusCodeMessage)

(cffi:defcfun ("espeak_ng_InitializePath" espeak_ng_InitializePath) :void
  (path :string))

(cl:export 'espeak_ng_InitializePath)

(cffi:defcfun ("espeak_ng_Initialize" espeak_ng_Initialize) espeak_ng_STATUS
  (context :pointer))

(cl:export 'espeak_ng_Initialize)

(cffi:defcfun ("espeak_ng_InitializeOutput" espeak_ng_InitializeOutput) espeak_ng_STATUS
  (output_mode espeak_ng_OUTPUT_MODE)
  (buffer_length :int)
  (device :string))

(cl:export 'espeak_ng_InitializeOutput)

(cffi:defcfun ("espeak_ng_GetSampleRate" espeak_ng_GetSampleRate) :int)

(cl:export 'espeak_ng_GetSampleRate)

(cffi:defcfun ("espeak_ng_SetParameter" espeak_ng_SetParameter) espeak_ng_STATUS
  (parameter espeak_PARAMETER)
  (value :int)
  (relative :int))

(cl:export 'espeak_ng_SetParameter)

(cffi:defcfun ("espeak_ng_SetPunctuationList" espeak_ng_SetPunctuationList) espeak_ng_STATUS
  (punctlist :pointer))

(cl:export 'espeak_ng_SetPunctuationList)

(cffi:defcfun ("espeak_ng_SetVoiceByName" espeak_ng_SetVoiceByName) espeak_ng_STATUS
  (name :string))

(cl:export 'espeak_ng_SetVoiceByName)

(cffi:defcfun ("espeak_ng_SetVoiceByProperties" espeak_ng_SetVoiceByProperties) espeak_ng_STATUS
  (voice_selector :pointer))

(cl:export 'espeak_ng_SetVoiceByProperties)

(cffi:defcfun ("espeak_ng_Synthesize" espeak_ng_Synthesize) espeak_ng_STATUS
  (text :pointer)
  (size :pointer)
  (position :unsigned-int)
  (position_type espeak_POSITION_TYPE)
  (end_position :unsigned-int)
  (flags :unsigned-int)
  (unique_identifier :pointer)
  (user_data :pointer))

(cl:export 'espeak_ng_Synthesize)

(cffi:defcfun ("espeak_ng_SynthesizeMark" espeak_ng_SynthesizeMark) espeak_ng_STATUS
  (text :pointer)
  (size :pointer)
  (index_mark :string)
  (end_position :unsigned-int)
  (flags :unsigned-int)
  (unique_identifier :pointer)
  (user_data :pointer))

(cl:export 'espeak_ng_SynthesizeMark)

(cffi:defcfun ("espeak_ng_SpeakKeyName" espeak_ng_SpeakKeyName) espeak_ng_STATUS
  (key_name :string))

(cl:export 'espeak_ng_SpeakKeyName)

(cffi:defcfun ("espeak_ng_SpeakCharacter" espeak_ng_SpeakCharacter) espeak_ng_STATUS
  (character :pointer))

(cl:export 'espeak_ng_SpeakCharacter)

(cffi:defcfun ("espeak_ng_Cancel" espeak_ng_Cancel) espeak_ng_STATUS)

(cl:export 'espeak_ng_Cancel)

(cffi:defcfun ("espeak_ng_Synchronize" espeak_ng_Synchronize) espeak_ng_STATUS)

(cl:export 'espeak_ng_Synchronize)

(cffi:defcfun ("espeak_ng_Terminate" espeak_ng_Terminate) espeak_ng_STATUS)

(cl:export 'espeak_ng_Terminate)

(cffi:defcfun ("espeak_ng_CompileDictionary" espeak_ng_CompileDictionary) espeak_ng_STATUS
  (dsource :string)
  (dict_name :string)
  (log :pointer)
  (flags :int)
  (context :pointer))

(cl:export 'espeak_ng_CompileDictionary)

(cffi:defcfun ("espeak_ng_CompileMbrolaVoice" espeak_ng_CompileMbrolaVoice) espeak_ng_STATUS
  (path :string)
  (log :pointer)
  (context :pointer))

(cl:export 'espeak_ng_CompileMbrolaVoice)

(cffi:defcfun ("espeak_ng_CompilePhonemeData" espeak_ng_CompilePhonemeData) espeak_ng_STATUS
  (rate :long)
  (log :pointer)
  (context :pointer))

(cl:export 'espeak_ng_CompilePhonemeData)

(cffi:defcfun ("espeak_ng_CompileIntonation" espeak_ng_CompileIntonation) espeak_ng_STATUS
  (log :pointer)
  (context :pointer))

(cl:export 'espeak_ng_CompileIntonation)

(cffi:defcfun ("espeak_ng_CompilePhonemeDataPath" espeak_ng_CompilePhonemeDataPath) espeak_ng_STATUS
  (rate :long)
  (source_path :string)
  (destination_path :string)
  (log :pointer)
  (context :pointer))

(cl:export 'espeak_ng_CompilePhonemeDataPath)

(cffi:defcfun ("sinsy_ng_Init" sinsy_ng_Init) espeak_ng_STATUS)

(cl:export 'sinsy_ng_Init)

(cffi:defcfun ("sinsy_ng_addNote" sinsy_ng_addNote) espeak_ng_STATUS
  (duration :pointer)
  (lyric :string)
  (pitch :pointer)
  (accent :pointer)
  (staccato :pointer)
  (slurType :int)
  (syllabicType :int)
  (breath :pointer))

(cl:export 'sinsy_ng_addNote)

(cffi:defcfun ("sinsy_ng_addRest" sinsy_ng_addRest) espeak_ng_STATUS
  (duration :pointer))

(cl:export 'sinsy_ng_addRest)

(cffi:defcfun ("sinsy_ng_getAudioData" sinsy_ng_getAudioData) :pointer
  (length :pointer))

(cl:export 'sinsy_ng_getAudioData)


